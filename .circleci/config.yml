version: 2
jobs:
  build:
    docker:
      # Build in Python container to install AWS CLI
      - image: circleci/golang:1.10

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Copy ssh key in the circleci build context
          command: |
            cp ${HOME}/.ssh/id_rsa id_rsa
      - run:
          name: Install AWSCLI
          command: |
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      - run:
          name: "Log in to AWS ECR"
          command: eval $(aws ecr get-login --no-include-email --region $AWS_REGION)
      - run:
          name: "Build & Push Docker Image"
          command: |
            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
            SHA1_SHORT=$(git rev-parse --short HEAD)
            DATE=`date +%Y%m%d%H%M%S`
            if [[ ($BRANCH_NAME == "develop") ]]
            then
              BRANCH_NAME="dev"
            elif [[ ($BRANCH_NAME == "master") ]]
            then
              BRANCH_NAME="stage"
            else
              BRANCH_NAME="feat"
            fi
            DOCKER_NAME="dccn-midway"
            docker build --no-cache -f Dockerfile -t $DOCKER_NAME:$BRANCH_NAME .
            for TAG in $BRANCH_NAME $SHA1_SHORT $BRANCH_NAME$DATE; do
              docker tag $DOCKER_NAME:$BRANCH_NAME 815280425737.dkr.ecr.us-west-2.amazonaws.com/dccn-midway:$TAG
              docker push 815280425737.dkr.ecr.us-west-2.amazonaws.com/dccn-midway:$TAG
            done

            kops export kubecfg --name ${K8S_CLUSTER}.k8s.ankr.network --state s3://kops.${K8S_CLUSTER}.config
            mkdir ./k8s/tmp

            kubectl patch --local -o yaml -p \
            '{"spec":{"template":{"spec":{"containers":[{"name":"midway","image":"'${AWS_ACCOUNT}'.dkr.ecr.'${AWS_REGION}'.amazonaws.com/dccn-midway:'${BRANCH_NAME}''${DATE}'"}]}}}}' \
            -f ./k8s/dccn-midway.yml > ./k8s/tmp/dccn-midway.yml
            kubectl apply -f ./kubernetes/tmp/dccn-midway.yml
            if ! kubectl rollout status deploy/midway --watch=true --timeout=60s; then
              echo "Deploy failed, roll back to previous version"
              kubectl rollout undo deploy/midway
            fi